# REU DADA2 Workflow
# June 2020
# Author: Kyle Spitler & Tifani Panek

#clear R brain
rm(list=ls())

knitr::opts_chunk$set(echo = TRUE)

library(readr)
library(readxl)
library(fs)
library(R.utils)
library(tidyverse)
library(stringr)
library(phyloseq)
library(ggplot2)
library(dada2)
library(magrittr)

baseFolder <- "~/Desktop/DukeREU/FastQ_Files/Nano_G/Combined"
CSVFile <- "~/Desktop/DukeREU/FastQ_Files/Nano_G/Combined/Metadata/Metadata_G.csv"


outputFiltered <- "~/Desktop/DukeREU/FastQ_Files/Nano_G/Combined/filtered"
output.dir <- "~/Desktop/DukeREU/FastQ_Files/Nano_G/Combined/output"
ps.file <- file.path(output.dir,"ps_Com.rds")
track.file <- file.path(output.dir,"track_Com.rds")

run.files <- list.files(baseFolder, pattern = "R1_001.fastq.gz")
sampleTable <- read_csv(CSVFile)

sampleTable

sampleTable = transform(sampleTable, SampleName = as.character(SampleName), Tank = as.character(Tank))

matchtable <- sampleTable
sampleTable

R1.fileName <- run.files
R2.fileName <- str_replace(run.files,"R1","R2")
run.files %>%
  as_tibble %>%
  separate(value, into=c("SampleName"),sep="_") %>%
  mutate(R1.fileName = R1.fileName, R2.fileName = R2.fileName) ->
  sampleInfo

sampleInfo %<>% 
  left_join(matchtable)

print(sampleInfo)

i<-12
plotQualityProfile(file.path(baseFolder, sampleInfo$R1.fileName[i]))
plotQualityProfile(file.path(baseFolder, sampleInfo$R2.fileName[i]))

### Generate filenames for the filtered fastq.gz files.
filtFs <- file.path(outputFiltered , paste0(sampleInfo$SampleName, "_F_filt.fastq.gz"))
filtRs <- file.path(outputFiltered , paste0(sampleInfo$SampleName, "_R_filt.fastq.gz"))
fnFs <- file.path(baseFolder,as.character(sampleInfo$R1.fileName))
fnRs <- file.path(baseFolder,as.character(sampleInfo$R2.fileName))

filt.out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, trimLeft=10, truncLen=c(230,230),
                          maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
                          compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
filt.out

filtFs <- filtFs[file_exists(filtFs)]
filtRs <- filtRs[file_exists(filtRs)]
sample.names <- filtFs  %>% 
  basename %>%
  str_replace("_F_filt.fastq.gz","") 


errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)

plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)

derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)

names(derepFs) <- sampleInfo$SampleName
names(derepRs) <- sampleInfo$SampleName

dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)

mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)

seqtab <- makeSequenceTable(mergers)

dim(seqtab)

table(nchar(getSequences(seqtab)))

seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)

getN <- function(x) sum(getUniques(x))
track <- filt.out %>%
  as.data.frame %>%
  rownames_to_column %>%
  mutate(rowname=str_replace(rowname, "_R1.fastq.gz","")) %>%
  rename(sample=rowname, input=reads.in, filtered=reads.out)
dadaFs %>%
  sapply(getN) %>%
  as_tibble(rownames = NA) %>%
  rownames_to_column %>%
  rename(sample=rowname, denoised=value) ->
  denoised
track %<>% full_join(denoised, by=c("sample"))
mergers %>%
  sapply(getN) %>%
  data.frame %>%
  rownames_to_column %>%
  rename(sample=rowname, merged='.') ->
  merged
track %<>% full_join(merged, by=c("sample"))
seqtab %>%
  rowSums %>%
  data.frame %>%
  rownames_to_column() %>%
  rename(sample=rowname, tabled = '.') -> 
  tabled

#   denoised
track %<>% full_join(tabled, by=c("sample"))

track %>%
  arrange(as.numeric(sample))
write_rds(track, track.file)

taxa <- assignTaxonomy(seqtab.nochim, "~/Desktop/DukeREU/Taxonomy/silva_nr_v138_train_set.fa.gz", multithread=TRUE)

taxa <- addSpecies(taxa, "~/Desktop/DukeREU/Taxonomy/silva_species_assignment_v138 (1).fa.gz")

library("BiocStyle")
.cran_packages <- c("ggplot2", "gridExtra")
.bioc_packages <- c("dada2", "phyloseq", "DECIPHER", "phangorn")

sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)

seqs <- getSequences(seqtab.nochim)
names(seqs) <- seqs 
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA,verbose=FALSE)

phangAlign <- phyDat(as(alignment, "matrix"), type="DNA")
dm <- dist.ml(phangAlign)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phangAlign)
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
                    rearrangement = "stochastic", control = pml.control(trace = 0))
detach("package:phangorn", unload=TRUE)


otus = otu_table(seqtab.nochim, taxa_are_rows=FALSE)

sampleInfo

sampleInfo %>%
  select(SampleName,Type,Sex,Tank) %>%
  column_to_rownames(var = "SampleName") -> sd

sd

ps <- phyloseq(otus, sample_data(sd), phy_tree(fitGTR$tree), tax_table(taxa))

print(ps)

write_rds(ps, ps.file)

plot_richness(ps, x="Sex", color="Type")

length(get_taxa_unique(ps, taxonomic.rank = "Genus"))

ps3 = tax_glom(ps, "Genus", NArm = TRUE)

multiPlotTitleTextSize = 15
p2tree = plot_tree(ps, method = "treeonly",
                   ladderize = "left",
                   title = "Before Agglomeration") +
  theme(plot.title = element_text(size = multiPlotTitleTextSize))
p3tree = plot_tree(ps3, method = "treeonly",
                   ladderize = "left", title = "By Genus")

grid.arrange(nrow = 1, p2tree, p3tree)
